# -*- coding: utf-8 -*-
"""fcc_project_predict_health_costs_with_regression.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1urm00_Vapxf7_4BfUTehClT3x2yxH_I7
"""

# Commented out IPython magic to ensure Python compatibility.
# Import libraries. You may or may not use all of these.
!pip install -q git+https://github.com/tensorflow/docs
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd

try:
  # %tensorflow_version only exists in Colab.
#   %tensorflow_version 2.x
except Exception:
  pass
import tensorflow as tf

from tensorflow import keras
from tensorflow.keras import layers

import tensorflow_docs as tfdocs
import tensorflow_docs.plots
import tensorflow_docs.modeling

# Import data
!wget https://cdn.freecodecamp.org/project-data/health-costs/insurance.csv
dataset = pd.read_csv('insurance.csv')
dataset.tail()

# types cast
datafr = dataset.convert_dtypes()

# categorical to numeric --> {female : 0 , male : 1}
datafr['sex'] = pd.factorize(datafr['sex'])[0]

# categorical to numeric --> {smoker : 0 , non-smoker : 1}
#datafr['smoker'] = pd.factorize(datafr['smoker'])[0]
datafr['smoker'] = datafr['smoker'].map({'no': 0, 'yes': 1})

# categorical to numeric --> {northwest : 2 , northeast : 3, southeast : 1, southwest : 0}
datafr['region'] = pd.factorize(datafr['region'])[0]

# simple regression with age ? multiple regression ?
#datafr = datafr[['age','expenses']]
datafr

# train/test data split

datafr_train_dataset = datafr.sample(frac=0.8, random_state=0)
datafr_test_dataset = datafr.drop(datafr_train_dataset.index)
#print(test_dataset)
#print(train_dataset)

datafr_train_labels = datafr_train_dataset.pop('expenses')
datafr_test_labels = datafr_test_dataset.pop('expenses')

#print(datafr_test_dataset)
#print(datafr_train_dataset)

#print(datafr_train_labels)
#print(datafr_test_labels)

# pandas to numpy array conversion

datafr_train_dataset_2 = datafr_train_dataset.convert_dtypes()
datafr_test_dataset_2 = datafr_test_dataset.convert_dtypes()
#print(train_dataset)
#print(test_dataset)

datafr_train_labels_2 = datafr_train_labels.convert_dtypes()
datafr_test_labels_2 = datafr_test_labels.convert_dtypes()
#print(train_labels)
#print(test_labels)

train_dataset = np.array(datafr_train_dataset_2.values.tolist())
test_dataset = np.array(datafr_test_dataset_2.values.tolist())
#print(train_dataset)
#print(test_dataset)

train_labels = np.array(datafr_train_labels_2.tolist())
test_labels = np.array(datafr_test_labels_2.tolist())
#print(train_labels)
#print(test_labels)

# model

model = tf.keras.Sequential([layers.Dense(64,activation='relu', input_shape=[6]),
                            layers.Dense(64, activation='relu'),
                            layers.Dense(1)])
model.compile(optimizer=tf.keras.optimizers.Adam(learning_rate=0.1), loss='mae', metrics=['mae','mse'])
#model.summary()

history = model.fit(train_dataset, train_labels, epochs=100, validation_split = 0.2, callbacks=[keras.callbacks.EarlyStopping(monitor='mae', patience=10), tfdocs.modeling.EpochDots()])

# history plot
plotter = tfdocs.plots.HistoryPlotter(smoothing_std=2)
plotter.plot({'': history}, metric = 'mae')
plt.ylabel('Expenses error')

# RUN THIS CELL TO TEST YOUR MODEL. DO NOT MODIFY CONTENTS.
# Test model by checking how well the model generalizes using the test set.
loss, mae, mse = model.evaluate(test_dataset, test_labels, verbose=2)

print("Testing set Mean Abs Error: {:5.2f} expenses".format(mae))

if mae < 3500:
  print("You passed the challenge. Great job!")
else:
  print("The Mean Abs Error must be less than 3500. Keep trying.")

# Plot predictions.
test_predictions = model.predict(test_dataset).flatten()

a = plt.axes(aspect='equal')
plt.scatter(test_labels, test_predictions)
plt.xlabel('True values (expenses)')
plt.ylabel('Predictions (expenses)')
lims = [0, 50000]
plt.xlim(lims)
plt.ylim(lims)
_ = plt.plot(lims,lims)